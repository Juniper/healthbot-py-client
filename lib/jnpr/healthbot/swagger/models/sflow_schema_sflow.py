# coding: utf-8

"""
    Paragon Insights APIs

    API interface for PI application  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: healthbot-feedback@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SflowSchemaSflow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'counter_record': 'list[SflowSchemaSflowCounterrecord]',
        'flow_record': 'list[SflowSchemaSflowCounterrecord]',
        'protocol': 'list[SflowSchemaSflowProtocol]',
        'sample': 'list[SflowSchemaSflowSample]'
    }

    attribute_map = {
        'counter_record': 'counter-record',
        'flow_record': 'flow-record',
        'protocol': 'protocol',
        'sample': 'sample'
    }

    def __init__(self, counter_record=None, flow_record=None, protocol=None, sample=None):  # noqa: E501
        """SflowSchemaSflow - a model defined in Swagger"""  # noqa: E501

        self._counter_record = None
        self._flow_record = None
        self._protocol = None
        self._sample = None
        self.discriminator = None

        if counter_record is not None:
            self.counter_record = counter_record
        if flow_record is not None:
            self.flow_record = flow_record
        if protocol is not None:
            self.protocol = protocol
        if sample is not None:
            self.sample = sample

    @property
    def counter_record(self):
        """Gets the counter_record of this SflowSchemaSflow.  # noqa: E501

        Counter record formats  # noqa: E501

        :return: The counter_record of this SflowSchemaSflow.  # noqa: E501
        :rtype: list[SflowSchemaSflowCounterrecord]
        """
        return self._counter_record

    @counter_record.setter
    def counter_record(self, counter_record):
        """Sets the counter_record of this SflowSchemaSflow.

        Counter record formats  # noqa: E501

        :param counter_record: The counter_record of this SflowSchemaSflow.  # noqa: E501
        :type: list[SflowSchemaSflowCounterrecord]
        """

        self._counter_record = counter_record

    @property
    def flow_record(self):
        """Gets the flow_record of this SflowSchemaSflow.  # noqa: E501

        Flow record formats  # noqa: E501

        :return: The flow_record of this SflowSchemaSflow.  # noqa: E501
        :rtype: list[SflowSchemaSflowCounterrecord]
        """
        return self._flow_record

    @flow_record.setter
    def flow_record(self, flow_record):
        """Sets the flow_record of this SflowSchemaSflow.

        Flow record formats  # noqa: E501

        :param flow_record: The flow_record of this SflowSchemaSflow.  # noqa: E501
        :type: list[SflowSchemaSflowCounterrecord]
        """

        self._flow_record = flow_record

    @property
    def protocol(self):
        """Gets the protocol of this SflowSchemaSflow.  # noqa: E501

        Decoding schema for protocols found in sflow  # noqa: E501

        :return: The protocol of this SflowSchemaSflow.  # noqa: E501
        :rtype: list[SflowSchemaSflowProtocol]
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this SflowSchemaSflow.

        Decoding schema for protocols found in sflow  # noqa: E501

        :param protocol: The protocol of this SflowSchemaSflow.  # noqa: E501
        :type: list[SflowSchemaSflowProtocol]
        """

        self._protocol = protocol

    @property
    def sample(self):
        """Gets the sample of this SflowSchemaSflow.  # noqa: E501

        Sample types and their header fields  # noqa: E501

        :return: The sample of this SflowSchemaSflow.  # noqa: E501
        :rtype: list[SflowSchemaSflowSample]
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """Sets the sample of this SflowSchemaSflow.

        Sample types and their header fields  # noqa: E501

        :param sample: The sample of this SflowSchemaSflow.  # noqa: E501
        :type: list[SflowSchemaSflowSample]
        """

        self._sample = sample

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SflowSchemaSflow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SflowSchemaSflow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
