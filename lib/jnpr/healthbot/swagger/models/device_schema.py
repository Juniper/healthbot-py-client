# coding: utf-8

"""
    Paragon Insights APIs

    API interface for PI application  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: healthbot-feedback@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DeviceSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication': 'DevicegroupSchemaAuthentication',
        'description': 'str',
        'device_id': 'str',
        'uuid': 'str',
        'flow': 'DeviceSchemaFlow',
        'host': 'str',
        'i_agent': 'DeviceSchemaIAgent',
        'open_config': 'DeviceSchemaOpenconfig',
        'server_monitoring': 'DeviceSchemaOpenconfig',
        'outbound_ssh': 'DeviceSchemaOutboundssh',
        'owner': 'str',
        'snmp': 'DeviceSchemaSnmp',
        'syslog': 'DeviceSchemaSyslog',
        'tagging_profile': 'list[str]',
        'timezone': 'str',
        'system_id': 'str',
        'use_ingest_receive_time': 'list[object]',
        'variable': 'list[DeviceSchemaVariable]',
        'vendor': 'DeviceSchemaVendor'
    }

    attribute_map = {
        'authentication': 'authentication',
        'description': 'description',
        'device_id': 'device-id',
        'uuid': 'uuid',
        'flow': 'flow',
        'host': 'host',
        'i_agent': 'iAgent',
        'open_config': 'open-config',
        'server_monitoring': 'server-monitoring',
        'outbound_ssh': 'outbound-ssh',
        'owner': 'owner',
        'snmp': 'snmp',
        'syslog': 'syslog',
        'tagging_profile': 'tagging-profile',
        'timezone': 'timezone',
        'system_id': 'system-id',
        'use_ingest_receive_time': 'use-ingest-receive-time',
        'variable': 'variable',
        'vendor': 'vendor'
    }

    def __init__(self, authentication=None, description=None, device_id=None, uuid=None, flow=None, host=None, i_agent=None, open_config=None, server_monitoring=None, outbound_ssh=None, owner=None, snmp=None, syslog=None, tagging_profile=None, timezone=None, system_id=None, use_ingest_receive_time=None, variable=None, vendor=None):  # noqa: E501
        """DeviceSchema - a model defined in Swagger"""  # noqa: E501

        self._authentication = None
        self._description = None
        self._device_id = None
        self._uuid = None
        self._flow = None
        self._host = None
        self._i_agent = None
        self._open_config = None
        self._server_monitoring = None
        self._outbound_ssh = None
        self._owner = None
        self._snmp = None
        self._syslog = None
        self._tagging_profile = None
        self._timezone = None
        self._system_id = None
        self._use_ingest_receive_time = None
        self._variable = None
        self._vendor = None
        self.discriminator = None

        if authentication is not None:
            self.authentication = authentication
        if description is not None:
            self.description = description
        self.device_id = device_id
        if uuid is not None:
            self.uuid = uuid
        if flow is not None:
            self.flow = flow
        self.host = host
        if i_agent is not None:
            self.i_agent = i_agent
        if open_config is not None:
            self.open_config = open_config
        if server_monitoring is not None:
            self.server_monitoring = server_monitoring
        if outbound_ssh is not None:
            self.outbound_ssh = outbound_ssh
        if owner is not None:
            self.owner = owner
        if snmp is not None:
            self.snmp = snmp
        if syslog is not None:
            self.syslog = syslog
        if tagging_profile is not None:
            self.tagging_profile = tagging_profile
        if timezone is not None:
            self.timezone = timezone
        if system_id is not None:
            self.system_id = system_id
        if use_ingest_receive_time is not None:
            self.use_ingest_receive_time = use_ingest_receive_time
        if variable is not None:
            self.variable = variable
        if vendor is not None:
            self.vendor = vendor

    @property
    def authentication(self):
        """Gets the authentication of this DeviceSchema.  # noqa: E501


        :return: The authentication of this DeviceSchema.  # noqa: E501
        :rtype: DevicegroupSchemaAuthentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this DeviceSchema.


        :param authentication: The authentication of this DeviceSchema.  # noqa: E501
        :type: DevicegroupSchemaAuthentication
        """

        self._authentication = authentication

    @property
    def description(self):
        """Gets the description of this DeviceSchema.  # noqa: E501

        Description about the device  # noqa: E501

        :return: The description of this DeviceSchema.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeviceSchema.

        Description about the device  # noqa: E501

        :param description: The description of this DeviceSchema.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def device_id(self):
        """Gets the device_id of this DeviceSchema.  # noqa: E501

        Identifier for the device. Should be of pattern [a-zA-Z][a-zA-Z0-9_-]*  # noqa: E501

        :return: The device_id of this DeviceSchema.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DeviceSchema.

        Identifier for the device. Should be of pattern [a-zA-Z][a-zA-Z0-9_-]*  # noqa: E501

        :param device_id: The device_id of this DeviceSchema.  # noqa: E501
        :type: str
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501
        if device_id is not None and len(device_id) > 64:
            raise ValueError("Invalid value for `device_id`, length must be less than or equal to `64`")  # noqa: E501
        if device_id is not None and not re.search('^[a-zA-Z0-9]([a-zA-Z0-9_-]*\\.*)*$', device_id):  # noqa: E501
            raise ValueError("Invalid value for `device_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9]([a-zA-Z0-9_-]*\\.*)*$/`")  # noqa: E501

        self._device_id = device_id

    @property
    def uuid(self):
        """Gets the uuid of this DeviceSchema.  # noqa: E501

        EMS: uuid of the EMS-advertised device  # noqa: E501

        :return: The uuid of this DeviceSchema.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DeviceSchema.

        EMS: uuid of the EMS-advertised device  # noqa: E501

        :param uuid: The uuid of this DeviceSchema.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def flow(self):
        """Gets the flow of this DeviceSchema.  # noqa: E501


        :return: The flow of this DeviceSchema.  # noqa: E501
        :rtype: DeviceSchemaFlow
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this DeviceSchema.


        :param flow: The flow of this DeviceSchema.  # noqa: E501
        :type: DeviceSchemaFlow
        """

        self._flow = flow

    @property
    def host(self):
        """Gets the host of this DeviceSchema.  # noqa: E501

        Name or IP of the device  # noqa: E501

        :return: The host of this DeviceSchema.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this DeviceSchema.

        Name or IP of the device  # noqa: E501

        :param host: The host of this DeviceSchema.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501
        if host is not None and len(host) > 255:
            raise ValueError("Invalid value for `host`, length must be less than or equal to `255`")  # noqa: E501
        if host is not None and len(host) < 1:
            raise ValueError("Invalid value for `host`, length must be greater than or equal to `1`")  # noqa: E501

        self._host = host

    @property
    def i_agent(self):
        """Gets the i_agent of this DeviceSchema.  # noqa: E501


        :return: The i_agent of this DeviceSchema.  # noqa: E501
        :rtype: DeviceSchemaIAgent
        """
        return self._i_agent

    @i_agent.setter
    def i_agent(self, i_agent):
        """Sets the i_agent of this DeviceSchema.


        :param i_agent: The i_agent of this DeviceSchema.  # noqa: E501
        :type: DeviceSchemaIAgent
        """

        self._i_agent = i_agent

    @property
    def open_config(self):
        """Gets the open_config of this DeviceSchema.  # noqa: E501


        :return: The open_config of this DeviceSchema.  # noqa: E501
        :rtype: DeviceSchemaOpenconfig
        """
        return self._open_config

    @open_config.setter
    def open_config(self, open_config):
        """Sets the open_config of this DeviceSchema.


        :param open_config: The open_config of this DeviceSchema.  # noqa: E501
        :type: DeviceSchemaOpenconfig
        """

        self._open_config = open_config

    @property
    def server_monitoring(self):
        """Gets the server_monitoring of this DeviceSchema.  # noqa: E501


        :return: The server_monitoring of this DeviceSchema.  # noqa: E501
        :rtype: DeviceSchemaOpenconfig
        """
        return self._server_monitoring

    @server_monitoring.setter
    def server_monitoring(self, server_monitoring):
        """Sets the server_monitoring of this DeviceSchema.


        :param server_monitoring: The server_monitoring of this DeviceSchema.  # noqa: E501
        :type: DeviceSchemaOpenconfig
        """

        self._server_monitoring = server_monitoring

    @property
    def outbound_ssh(self):
        """Gets the outbound_ssh of this DeviceSchema.  # noqa: E501


        :return: The outbound_ssh of this DeviceSchema.  # noqa: E501
        :rtype: DeviceSchemaOutboundssh
        """
        return self._outbound_ssh

    @outbound_ssh.setter
    def outbound_ssh(self, outbound_ssh):
        """Sets the outbound_ssh of this DeviceSchema.


        :param outbound_ssh: The outbound_ssh of this DeviceSchema.  # noqa: E501
        :type: DeviceSchemaOutboundssh
        """

        self._outbound_ssh = outbound_ssh

    @property
    def owner(self):
        """Gets the owner of this DeviceSchema.  # noqa: E501

        Owner of the device: this is a read-only attribute and should not be added to the request payload, value if added will be discarded.  # noqa: E501

        :return: The owner of this DeviceSchema.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this DeviceSchema.

        Owner of the device: this is a read-only attribute and should not be added to the request payload, value if added will be discarded.  # noqa: E501

        :param owner: The owner of this DeviceSchema.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def snmp(self):
        """Gets the snmp of this DeviceSchema.  # noqa: E501


        :return: The snmp of this DeviceSchema.  # noqa: E501
        :rtype: DeviceSchemaSnmp
        """
        return self._snmp

    @snmp.setter
    def snmp(self, snmp):
        """Sets the snmp of this DeviceSchema.


        :param snmp: The snmp of this DeviceSchema.  # noqa: E501
        :type: DeviceSchemaSnmp
        """

        self._snmp = snmp

    @property
    def syslog(self):
        """Gets the syslog of this DeviceSchema.  # noqa: E501


        :return: The syslog of this DeviceSchema.  # noqa: E501
        :rtype: DeviceSchemaSyslog
        """
        return self._syslog

    @syslog.setter
    def syslog(self, syslog):
        """Sets the syslog of this DeviceSchema.


        :param syslog: The syslog of this DeviceSchema.  # noqa: E501
        :type: DeviceSchemaSyslog
        """

        self._syslog = syslog

    @property
    def tagging_profile(self):
        """Gets the tagging_profile of this DeviceSchema.  # noqa: E501


        :return: The tagging_profile of this DeviceSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._tagging_profile

    @tagging_profile.setter
    def tagging_profile(self, tagging_profile):
        """Sets the tagging_profile of this DeviceSchema.


        :param tagging_profile: The tagging_profile of this DeviceSchema.  # noqa: E501
        :type: list[str]
        """

        self._tagging_profile = tagging_profile

    @property
    def timezone(self):
        """Gets the timezone of this DeviceSchema.  # noqa: E501

        Timezone in the format +/-hh:mm, Example: -08:00  # noqa: E501

        :return: The timezone of this DeviceSchema.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this DeviceSchema.

        Timezone in the format +/-hh:mm, Example: -08:00  # noqa: E501

        :param timezone: The timezone of this DeviceSchema.  # noqa: E501
        :type: str
        """
        if timezone is not None and not re.search(r'^((\\+|-)((([0-1][0-9])|(2[0-3])):([0-5][0-9])))$', timezone):  # noqa: E501
            raise ValueError(r"Invalid value for `timezone`, must be a follow pattern or equal to `/^((\\+|-)((([0-1][0-9])|(2[0-3])):([0-5][0-9])))$/`")  # noqa: E501

        self._timezone = timezone

    @property
    def system_id(self):
        """Gets the system_id of this DeviceSchema.  # noqa: E501

        ID which is sent in the JTI UDP messages  # noqa: E501

        :return: The system_id of this DeviceSchema.  # noqa: E501
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this DeviceSchema.

        ID which is sent in the JTI UDP messages  # noqa: E501

        :param system_id: The system_id of this DeviceSchema.  # noqa: E501
        :type: str
        """

        self._system_id = system_id

    @property
    def use_ingest_receive_time(self):
        """Gets the use_ingest_receive_time of this DeviceSchema.  # noqa: E501

        Enable using ingest receive time in formulas like elapsed-time and rate-of-change  # noqa: E501

        :return: The use_ingest_receive_time of this DeviceSchema.  # noqa: E501
        :rtype: list[object]
        """
        return self._use_ingest_receive_time

    @use_ingest_receive_time.setter
    def use_ingest_receive_time(self, use_ingest_receive_time):
        """Sets the use_ingest_receive_time of this DeviceSchema.

        Enable using ingest receive time in formulas like elapsed-time and rate-of-change  # noqa: E501

        :param use_ingest_receive_time: The use_ingest_receive_time of this DeviceSchema.  # noqa: E501
        :type: list[object]
        """

        self._use_ingest_receive_time = use_ingest_receive_time

    @property
    def variable(self):
        """Gets the variable of this DeviceSchema.  # noqa: E501

        Playbook variable configuration  # noqa: E501

        :return: The variable of this DeviceSchema.  # noqa: E501
        :rtype: list[DeviceSchemaVariable]
        """
        return self._variable

    @variable.setter
    def variable(self, variable):
        """Sets the variable of this DeviceSchema.

        Playbook variable configuration  # noqa: E501

        :param variable: The variable of this DeviceSchema.  # noqa: E501
        :type: list[DeviceSchemaVariable]
        """

        self._variable = variable

    @property
    def vendor(self):
        """Gets the vendor of this DeviceSchema.  # noqa: E501


        :return: The vendor of this DeviceSchema.  # noqa: E501
        :rtype: DeviceSchemaVendor
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this DeviceSchema.


        :param vendor: The vendor of this DeviceSchema.  # noqa: E501
        :type: DeviceSchemaVendor
        """

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
