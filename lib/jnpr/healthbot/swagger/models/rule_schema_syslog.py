# coding: utf-8

"""
    Paragon Insights APIs

    API interface for PI application  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: healthbot-feedback@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RuleSchemaSyslog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pattern_set': 'str',
        'maximum_hold_period': 'str'
    }

    attribute_map = {
        'pattern_set': 'pattern-set',
        'maximum_hold_period': 'maximum-hold-period'
    }

    def __init__(self, pattern_set=None, maximum_hold_period='1s'):  # noqa: E501
        """RuleSchemaSyslog - a model defined in Swagger"""  # noqa: E501

        self._pattern_set = None
        self._maximum_hold_period = None
        self.discriminator = None

        self.pattern_set = pattern_set
        if maximum_hold_period is not None:
            self.maximum_hold_period = maximum_hold_period

    @property
    def pattern_set(self):
        """Gets the pattern_set of this RuleSchemaSyslog.  # noqa: E501

        Pattern-set applicable for this sensor  # noqa: E501

        :return: The pattern_set of this RuleSchemaSyslog.  # noqa: E501
        :rtype: str
        """
        return self._pattern_set

    @pattern_set.setter
    def pattern_set(self, pattern_set):
        """Sets the pattern_set of this RuleSchemaSyslog.

        Pattern-set applicable for this sensor  # noqa: E501

        :param pattern_set: The pattern_set of this RuleSchemaSyslog.  # noqa: E501
        :type: str
        """
        if pattern_set is None:
            raise ValueError("Invalid value for `pattern_set`, must not be `None`")  # noqa: E501

        self._pattern_set = pattern_set

    @property
    def maximum_hold_period(self):
        """Gets the maximum_hold_period of this RuleSchemaSyslog.  # noqa: E501

        Maximum time (in units of seconds/minutes/hours/days) system will wait for all fields to arrive before flushing all the field data. Default is 1 second  # noqa: E501

        :return: The maximum_hold_period of this RuleSchemaSyslog.  # noqa: E501
        :rtype: str
        """
        return self._maximum_hold_period

    @maximum_hold_period.setter
    def maximum_hold_period(self, maximum_hold_period):
        """Sets the maximum_hold_period of this RuleSchemaSyslog.

        Maximum time (in units of seconds/minutes/hours/days) system will wait for all fields to arrive before flushing all the field data. Default is 1 second  # noqa: E501

        :param maximum_hold_period: The maximum_hold_period of this RuleSchemaSyslog.  # noqa: E501
        :type: str
        """
        if maximum_hold_period is not None and not re.search(r'[1-9][0-9]*[smhd]', maximum_hold_period):  # noqa: E501
            raise ValueError(r"Invalid value for `maximum_hold_period`, must be a follow pattern or equal to `/[1-9][0-9]*[smhd]/`")  # noqa: E501

        self._maximum_hold_period = maximum_hold_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleSchemaSyslog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleSchemaSyslog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
