# coding: utf-8

"""
    Paragon Insights APIs

    API interface for PI application  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: healthbot-feedback@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RuleSchemaRulepropertiesSupporteddevicesProducts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'platforms': 'list[RuleSchemaRulepropertiesSupporteddevicesPlatforms]',
        'product_name': 'str',
        'sensors': 'list[str]'
    }

    attribute_map = {
        'platforms': 'platforms',
        'product_name': 'product-name',
        'sensors': 'sensors'
    }

    def __init__(self, platforms=None, product_name=None, sensors=None):  # noqa: E501
        """RuleSchemaRulepropertiesSupporteddevicesProducts - a model defined in Swagger"""  # noqa: E501

        self._platforms = None
        self._product_name = None
        self._sensors = None
        self.discriminator = None

        if platforms is not None:
            self.platforms = platforms
        self.product_name = product_name
        if sensors is not None:
            self.sensors = sensors

    @property
    def platforms(self):
        """Gets the platforms of this RuleSchemaRulepropertiesSupporteddevicesProducts.  # noqa: E501

        Platform information  # noqa: E501

        :return: The platforms of this RuleSchemaRulepropertiesSupporteddevicesProducts.  # noqa: E501
        :rtype: list[RuleSchemaRulepropertiesSupporteddevicesPlatforms]
        """
        return self._platforms

    @platforms.setter
    def platforms(self, platforms):
        """Sets the platforms of this RuleSchemaRulepropertiesSupporteddevicesProducts.

        Platform information  # noqa: E501

        :param platforms: The platforms of this RuleSchemaRulepropertiesSupporteddevicesProducts.  # noqa: E501
        :type: list[RuleSchemaRulepropertiesSupporteddevicesPlatforms]
        """

        self._platforms = platforms

    @property
    def product_name(self):
        """Gets the product_name of this RuleSchemaRulepropertiesSupporteddevicesProducts.  # noqa: E501

        Product name, Ex: MX, SRX  # noqa: E501

        :return: The product_name of this RuleSchemaRulepropertiesSupporteddevicesProducts.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this RuleSchemaRulepropertiesSupporteddevicesProducts.

        Product name, Ex: MX, SRX  # noqa: E501

        :param product_name: The product_name of this RuleSchemaRulepropertiesSupporteddevicesProducts.  # noqa: E501
        :type: str
        """
        if product_name is None:
            raise ValueError("Invalid value for `product_name`, must not be `None`")  # noqa: E501
        if product_name is not None and len(product_name) > 64:
            raise ValueError("Invalid value for `product_name`, length must be less than or equal to `64`")  # noqa: E501
        if product_name is not None and len(product_name) < 1:
            raise ValueError("Invalid value for `product_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._product_name = product_name

    @property
    def sensors(self):
        """Gets the sensors of this RuleSchemaRulepropertiesSupporteddevicesProducts.  # noqa: E501


        :return: The sensors of this RuleSchemaRulepropertiesSupporteddevicesProducts.  # noqa: E501
        :rtype: list[str]
        """
        return self._sensors

    @sensors.setter
    def sensors(self, sensors):
        """Sets the sensors of this RuleSchemaRulepropertiesSupporteddevicesProducts.


        :param sensors: The sensors of this RuleSchemaRulepropertiesSupporteddevicesProducts.  # noqa: E501
        :type: list[str]
        """

        self._sensors = sensors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleSchemaRulepropertiesSupporteddevicesProducts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleSchemaRulepropertiesSupporteddevicesProducts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
