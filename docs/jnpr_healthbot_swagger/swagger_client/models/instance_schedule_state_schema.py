# coding: utf-8

"""
    Paragon Insights APIs

    API interface for PI application  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: healthbot-feedback@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InstanceScheduleStateSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_name': 'str',
        'group_type': 'str',
        'name': 'str',
        'rule': 'str',
        'playbook': 'str',
        'state': 'str',
        'update_time': 'object'
    }

    attribute_map = {
        'group_name': 'group-name',
        'group_type': 'group-type',
        'name': 'name',
        'rule': 'rule',
        'playbook': 'playbook',
        'state': 'state',
        'update_time': 'update-time'
    }

    def __init__(self, group_name=None, group_type=None, name=None, rule=None, playbook=None, state=None, update_time=None):  # noqa: E501
        """InstanceScheduleStateSchema - a model defined in Swagger"""  # noqa: E501

        self._group_name = None
        self._group_type = None
        self._name = None
        self._rule = None
        self._playbook = None
        self._state = None
        self._update_time = None
        self.discriminator = None

        self.group_name = group_name
        self.group_type = group_type
        self.name = name
        self.rule = rule
        self.playbook = playbook
        self.state = state
        if update_time is not None:
            self.update_time = update_time

    @property
    def group_name(self):
        """Gets the group_name of this InstanceScheduleStateSchema.  # noqa: E501

        Name of the group  # noqa: E501

        :return: The group_name of this InstanceScheduleStateSchema.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this InstanceScheduleStateSchema.

        Name of the group  # noqa: E501

        :param group_name: The group_name of this InstanceScheduleStateSchema.  # noqa: E501
        :type: str
        """
        if group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")  # noqa: E501

        self._group_name = group_name

    @property
    def group_type(self):
        """Gets the group_type of this InstanceScheduleStateSchema.  # noqa: E501

        Type of the group. Can be one of device-group or network-group  # noqa: E501

        :return: The group_type of this InstanceScheduleStateSchema.  # noqa: E501
        :rtype: str
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this InstanceScheduleStateSchema.

        Type of the group. Can be one of device-group or network-group  # noqa: E501

        :param group_type: The group_type of this InstanceScheduleStateSchema.  # noqa: E501
        :type: str
        """
        if group_type is None:
            raise ValueError("Invalid value for `group_type`, must not be `None`")  # noqa: E501
        allowed_values = ["device-group", "network-group"]  # noqa: E501
        if group_type not in allowed_values:
            raise ValueError(
                "Invalid value for `group_type` ({0}), must be one of {1}"  # noqa: E501
                .format(group_type, allowed_values)
            )

        self._group_type = group_type

    @property
    def name(self):
        """Gets the name of this InstanceScheduleStateSchema.  # noqa: E501

        Name of the instance  # noqa: E501

        :return: The name of this InstanceScheduleStateSchema.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InstanceScheduleStateSchema.

        Name of the instance  # noqa: E501

        :param name: The name of this InstanceScheduleStateSchema.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def rule(self):
        """Gets the rule of this InstanceScheduleStateSchema.  # noqa: E501

        Name of the rule associated with the instance  # noqa: E501

        :return: The rule of this InstanceScheduleStateSchema.  # noqa: E501
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this InstanceScheduleStateSchema.

        Name of the rule associated with the instance  # noqa: E501

        :param rule: The rule of this InstanceScheduleStateSchema.  # noqa: E501
        :type: str
        """
        if rule is None:
            raise ValueError("Invalid value for `rule`, must not be `None`")  # noqa: E501

        self._rule = rule

    @property
    def playbook(self):
        """Gets the playbook of this InstanceScheduleStateSchema.  # noqa: E501

        Name of the playbook associated with the instance  # noqa: E501

        :return: The playbook of this InstanceScheduleStateSchema.  # noqa: E501
        :rtype: str
        """
        return self._playbook

    @playbook.setter
    def playbook(self, playbook):
        """Sets the playbook of this InstanceScheduleStateSchema.

        Name of the playbook associated with the instance  # noqa: E501

        :param playbook: The playbook of this InstanceScheduleStateSchema.  # noqa: E501
        :type: str
        """
        if playbook is None:
            raise ValueError("Invalid value for `playbook`, must not be `None`")  # noqa: E501

        self._playbook = playbook

    @property
    def state(self):
        """Gets the state of this InstanceScheduleStateSchema.  # noqa: E501

        Scheduled state of the instance. Can be one of active or inactive  # noqa: E501

        :return: The state of this InstanceScheduleStateSchema.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InstanceScheduleStateSchema.

        Scheduled state of the instance. Can be one of active or inactive  # noqa: E501

        :param state: The state of this InstanceScheduleStateSchema.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["active", "inactive"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this InstanceScheduleStateSchema.  # noqa: E501

        Time the current status is updated for this instance in elapsed seconds since epoch  # noqa: E501

        :return: The update_time of this InstanceScheduleStateSchema.  # noqa: E501
        :rtype: object
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this InstanceScheduleStateSchema.

        Time the current status is updated for this instance in elapsed seconds since epoch  # noqa: E501

        :param update_time: The update_time of this InstanceScheduleStateSchema.  # noqa: E501
        :type: object
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceScheduleStateSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceScheduleStateSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
