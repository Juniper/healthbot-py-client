# coding: utf-8

"""
    Paragon Insights APIs

    API interface for PI application  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: healthbot-feedback@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SiteSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'edge': 'list[EdgeSchema]',
        'site_name': 'str'
    }

    attribute_map = {
        'description': 'description',
        'edge': 'edge',
        'site_name': 'site-name'
    }

    def __init__(self, description=None, edge=None, site_name=None):  # noqa: E501
        """SiteSchema - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._edge = None
        self._site_name = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if edge is not None:
            self.edge = edge
        self.site_name = site_name

    @property
    def description(self):
        """Gets the description of this SiteSchema.  # noqa: E501

        Description about the site  # noqa: E501

        :return: The description of this SiteSchema.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SiteSchema.

        Description about the site  # noqa: E501

        :param description: The description of this SiteSchema.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def edge(self):
        """Gets the edge of this SiteSchema.  # noqa: E501


        :return: The edge of this SiteSchema.  # noqa: E501
        :rtype: list[EdgeSchema]
        """
        return self._edge

    @edge.setter
    def edge(self, edge):
        """Sets the edge of this SiteSchema.


        :param edge: The edge of this SiteSchema.  # noqa: E501
        :type: list[EdgeSchema]
        """

        self._edge = edge

    @property
    def site_name(self):
        """Gets the site_name of this SiteSchema.  # noqa: E501

        Name of the site. Should be of pattern [a-zA-Z][a-zA-Z0-9_-]*  # noqa: E501

        :return: The site_name of this SiteSchema.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this SiteSchema.

        Name of the site. Should be of pattern [a-zA-Z][a-zA-Z0-9_-]*  # noqa: E501

        :param site_name: The site_name of this SiteSchema.  # noqa: E501
        :type: str
        """
        if site_name is None:
            raise ValueError("Invalid value for `site_name`, must not be `None`")  # noqa: E501
        if site_name is not None and len(site_name) > 64:
            raise ValueError("Invalid value for `site_name`, length must be less than or equal to `64`")  # noqa: E501
        if site_name is not None and len(site_name) < 1:
            raise ValueError("Invalid value for `site_name`, length must be greater than or equal to `1`")  # noqa: E501
        if site_name is not None and not re.search(r'^[a-zA-Z][a-zA-Z0-9_-]*$', site_name):  # noqa: E501
            raise ValueError(r"Invalid value for `site_name`, must be a follow pattern or equal to `/^[a-zA-Z][a-zA-Z0-9_-]*$/`")  # noqa: E501

        self._site_name = site_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
