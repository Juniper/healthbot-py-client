# coding: utf-8

"""
    Paragon Insights APIs

    API interface for PI application  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: healthbot-feedback@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RuleSchemaWhenIncreasingatleastbyrate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all': 'list[object]',
        'any': 'list[object]',
        'field_name': 'str',
        'per': 'str',
        'time_range': 'str',
        'value': 'str',
        'percentage': 'str'
    }

    attribute_map = {
        'all': 'all',
        'any': 'any',
        'field_name': 'field-name',
        'per': 'per',
        'time_range': 'time-range',
        'value': 'value',
        'percentage': 'percentage'
    }

    def __init__(self, all=None, any=None, field_name=None, per=None, time_range=None, value=None, percentage=None):  # noqa: E501
        """RuleSchemaWhenIncreasingatleastbyrate - a model defined in Swagger"""  # noqa: E501

        self._all = None
        self._any = None
        self._field_name = None
        self._per = None
        self._time_range = None
        self._value = None
        self._percentage = None
        self.discriminator = None

        if all is not None:
            self.all = all
        if any is not None:
            self.any = any
        self.field_name = field_name
        self.per = per
        if time_range is not None:
            self.time_range = time_range
        if value is not None:
            self.value = value
        if percentage is not None:
            self.percentage = percentage

    @property
    def all(self):
        """Gets the all of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501

        With this flag, result is set to True only if all the data matches the given condition  # noqa: E501

        :return: The all of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501
        :rtype: list[object]
        """
        return self._all

    @all.setter
    def all(self, all):
        """Sets the all of this RuleSchemaWhenIncreasingatleastbyrate.

        With this flag, result is set to True only if all the data matches the given condition  # noqa: E501

        :param all: The all of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501
        :type: list[object]
        """

        self._all = all

    @property
    def any(self):
        """Gets the any of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501

        With this flag, result is set to True if any one of the data matches the condition  # noqa: E501

        :return: The any of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501
        :rtype: list[object]
        """
        return self._any

    @any.setter
    def any(self, any):
        """Sets the any of this RuleSchemaWhenIncreasingatleastbyrate.

        With this flag, result is set to True if any one of the data matches the condition  # noqa: E501

        :param any: The any of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501
        :type: list[object]
        """

        self._any = any

    @property
    def field_name(self):
        """Gets the field_name of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501

        Field name. Should match the pattern $[a-z][a-zA-Z0-9_-]*  # noqa: E501

        :return: The field_name of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this RuleSchemaWhenIncreasingatleastbyrate.

        Field name. Should match the pattern $[a-z][a-zA-Z0-9_-]*  # noqa: E501

        :param field_name: The field_name of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501
        :type: str
        """
        if field_name is None:
            raise ValueError("Invalid value for `field_name`, must not be `None`")  # noqa: E501
        if field_name is not None and not re.search(r'^\\$[a-z][a-zA-Z0-9_-]*$', field_name):  # noqa: E501
            raise ValueError(r"Invalid value for `field_name`, must be a follow pattern or equal to `/^\\$[a-z][a-zA-Z0-9_-]*$/`")  # noqa: E501

        self._field_name = field_name

    @property
    def per(self):
        """Gets the per of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501

        Time unit part of rate  # noqa: E501

        :return: The per of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501
        :rtype: str
        """
        return self._per

    @per.setter
    def per(self, per):
        """Sets the per of this RuleSchemaWhenIncreasingatleastbyrate.

        Time unit part of rate  # noqa: E501

        :param per: The per of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501
        :type: str
        """
        if per is None:
            raise ValueError("Invalid value for `per`, must not be `None`")  # noqa: E501
        allowed_values = ["second", "minute", "hour", "day", "week", "month", "year"]  # noqa: E501
        if per not in allowed_values:
            raise ValueError(
                "Invalid value for `per` ({0}), must be one of {1}"  # noqa: E501
                .format(per, allowed_values)
            )

        self._per = per

    @property
    def time_range(self):
        """Gets the time_range of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501

        How much back in time should we look for data. Specify positive integer followed by s/m/h/d/w/y/o representing seconds/minutes/hours/days/weeks/years/offset. Eg: 2s  # noqa: E501

        :return: The time_range of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501
        :rtype: str
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this RuleSchemaWhenIncreasingatleastbyrate.

        How much back in time should we look for data. Specify positive integer followed by s/m/h/d/w/y/o representing seconds/minutes/hours/days/weeks/years/offset. Eg: 2s  # noqa: E501

        :param time_range: The time_range of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501
        :type: str
        """
        if time_range is not None and not re.search(r'^[1-9][0-9]*(\\.[0-9]+)?(o|s|m|h|d|w|y|offset)$', time_range):  # noqa: E501
            raise ValueError(r"Invalid value for `time_range`, must be a follow pattern or equal to `/^[1-9][0-9]*(\\.[0-9]+)?(o|s|m|h|d|w|y|offset)$/`")  # noqa: E501

        self._time_range = time_range

    @property
    def value(self):
        """Gets the value of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501

        Value part of rate. This can be a float or field name from this rule and should match the pattern (\\d+(\\.\\d{0,2})?)|($[a-z][a-zA-Z0-9_-]*)  # noqa: E501

        :return: The value of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RuleSchemaWhenIncreasingatleastbyrate.

        Value part of rate. This can be a float or field name from this rule and should match the pattern (\\d+(\\.\\d{0,2})?)|($[a-z][a-zA-Z0-9_-]*)  # noqa: E501

        :param value: The value of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501
        :type: str
        """
        if value is not None and not re.search(r'(^\\d+(\\.\\d{0,2})?$)|(^\\$[a-z][a-zA-Z0-9_-]*$)', value):  # noqa: E501
            raise ValueError(r"Invalid value for `value`, must be a follow pattern or equal to `/(^\\d+(\\.\\d{0,2})?$)|(^\\$[a-z][a-zA-Z0-9_-]*$)/`")  # noqa: E501

        self._value = value

    @property
    def percentage(self):
        """Gets the percentage of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501

        Percentage of change from previous value. This can be a float or field name from this rule and should match the pattern (\\d+(\\.\\d{0,2})?)|($[a-z][a-zA-Z0-9_-]*)  # noqa: E501

        :return: The percentage of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this RuleSchemaWhenIncreasingatleastbyrate.

        Percentage of change from previous value. This can be a float or field name from this rule and should match the pattern (\\d+(\\.\\d{0,2})?)|($[a-z][a-zA-Z0-9_-]*)  # noqa: E501

        :param percentage: The percentage of this RuleSchemaWhenIncreasingatleastbyrate.  # noqa: E501
        :type: str
        """
        if percentage is not None and not re.search(r'(^\\d+(\\.\\d{0,2})?$)|(^\\$[a-z][a-zA-Z0-9_-]*$)', percentage):  # noqa: E501
            raise ValueError(r"Invalid value for `percentage`, must be a follow pattern or equal to `/(^\\d+(\\.\\d{0,2})?$)|(^\\$[a-z][a-zA-Z0-9_-]*$)/`")  # noqa: E501

        self._percentage = percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleSchemaWhenIncreasingatleastbyrate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleSchemaWhenIncreasingatleastbyrate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
