# coding: utf-8

"""
    Paragon Insights APIs

    API interface for PI application  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: healthbot-feedback@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SflowSchemaSflowSizebasedonfield(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'then': 'SflowSchemaSflowSizebasedonfieldThen',
        'when_equal': 'list[SflowSchemaSflowSizebasedonfieldWhenequal]'
    }

    attribute_map = {
        'then': 'then',
        'when_equal': 'when-equal'
    }

    def __init__(self, then=None, when_equal=None):  # noqa: E501
        """SflowSchemaSflowSizebasedonfield - a model defined in Swagger"""  # noqa: E501

        self._then = None
        self._when_equal = None
        self.discriminator = None

        if then is not None:
            self.then = then
        if when_equal is not None:
            self.when_equal = when_equal

    @property
    def then(self):
        """Gets the then of this SflowSchemaSflowSizebasedonfield.  # noqa: E501


        :return: The then of this SflowSchemaSflowSizebasedonfield.  # noqa: E501
        :rtype: SflowSchemaSflowSizebasedonfieldThen
        """
        return self._then

    @then.setter
    def then(self, then):
        """Sets the then of this SflowSchemaSflowSizebasedonfield.


        :param then: The then of this SflowSchemaSflowSizebasedonfield.  # noqa: E501
        :type: SflowSchemaSflowSizebasedonfieldThen
        """

        self._then = then

    @property
    def when_equal(self):
        """Gets the when_equal of this SflowSchemaSflowSizebasedonfield.  # noqa: E501

        List of lhs, rhs, and field size for each comparison  # noqa: E501

        :return: The when_equal of this SflowSchemaSflowSizebasedonfield.  # noqa: E501
        :rtype: list[SflowSchemaSflowSizebasedonfieldWhenequal]
        """
        return self._when_equal

    @when_equal.setter
    def when_equal(self, when_equal):
        """Sets the when_equal of this SflowSchemaSflowSizebasedonfield.

        List of lhs, rhs, and field size for each comparison  # noqa: E501

        :param when_equal: The when_equal of this SflowSchemaSflowSizebasedonfield.  # noqa: E501
        :type: list[SflowSchemaSflowSizebasedonfieldWhenequal]
        """

        self._when_equal = when_equal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SflowSchemaSflowSizebasedonfield, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SflowSchemaSflowSizebasedonfield):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
