# coding: utf-8

"""
    Paragon Insights APIs

    API interface for PI application  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: healthbot-feedback@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HbGraphsQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'group_name': 'str',
        'group_type': 'str',
        'device_name': 'str',
        'measurement_name': 'str',
        'measurement_type': 'str',
        'transformation': 'str',
        'field_name': 'str',
        'field_type': 'str',
        'field_aggregation': 'str',
        'where': 'HbGraphsQueryWhere',
        'group_by_interval': 'str',
        'group_by_fill': 'str',
        'group_by_tag_key': 'str',
        'retention_policy': 'str'
    }

    attribute_map = {
        'group_name': 'group_name',
        'group_type': 'group_type',
        'device_name': 'device_name',
        'measurement_name': 'measurement_name',
        'measurement_type': 'measurement_type',
        'transformation': 'transformation',
        'field_name': 'field_name',
        'field_type': 'field_type',
        'field_aggregation': 'field_aggregation',
        'where': 'where',
        'group_by_interval': 'group_by_interval',
        'group_by_fill': 'group_by_fill',
        'group_by_tag_key': 'group_by_tag_key',
        'retention_policy': 'retention_policy'
    }

    def __init__(self, group_name=None, group_type=None, device_name=None, measurement_name=None, measurement_type=None, transformation=None, field_name=None, field_type=None, field_aggregation=None, where=None, group_by_interval=None, group_by_fill=None, group_by_tag_key=None, retention_policy=None):  # noqa: E501
        """HbGraphsQuery - a model defined in Swagger"""  # noqa: E501

        self._group_name = None
        self._group_type = None
        self._device_name = None
        self._measurement_name = None
        self._measurement_type = None
        self._transformation = None
        self._field_name = None
        self._field_type = None
        self._field_aggregation = None
        self._where = None
        self._group_by_interval = None
        self._group_by_fill = None
        self._group_by_tag_key = None
        self._retention_policy = None
        self.discriminator = None

        if group_name is not None:
            self.group_name = group_name
        if group_type is not None:
            self.group_type = group_type
        if device_name is not None:
            self.device_name = device_name
        if measurement_name is not None:
            self.measurement_name = measurement_name
        if measurement_type is not None:
            self.measurement_type = measurement_type
        if transformation is not None:
            self.transformation = transformation
        if field_name is not None:
            self.field_name = field_name
        if field_type is not None:
            self.field_type = field_type
        if field_aggregation is not None:
            self.field_aggregation = field_aggregation
        if where is not None:
            self.where = where
        if group_by_interval is not None:
            self.group_by_interval = group_by_interval
        if group_by_fill is not None:
            self.group_by_fill = group_by_fill
        if group_by_tag_key is not None:
            self.group_by_tag_key = group_by_tag_key
        if retention_policy is not None:
            self.retention_policy = retention_policy

    @property
    def group_name(self):
        """Gets the group_name of this HbGraphsQuery.  # noqa: E501

        Device/Network group name  # noqa: E501

        :return: The group_name of this HbGraphsQuery.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this HbGraphsQuery.

        Device/Network group name  # noqa: E501

        :param group_name: The group_name of this HbGraphsQuery.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def group_type(self):
        """Gets the group_type of this HbGraphsQuery.  # noqa: E501

        Device/Network group type  # noqa: E501

        :return: The group_type of this HbGraphsQuery.  # noqa: E501
        :rtype: str
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this HbGraphsQuery.

        Device/Network group type  # noqa: E501

        :param group_type: The group_type of this HbGraphsQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["device", "network"]  # noqa: E501
        if group_type not in allowed_values:
            raise ValueError(
                "Invalid value for `group_type` ({0}), must be one of {1}"  # noqa: E501
                .format(group_type, allowed_values)
            )

        self._group_type = group_type

    @property
    def device_name(self):
        """Gets the device_name of this HbGraphsQuery.  # noqa: E501

        label name  # noqa: E501

        :return: The device_name of this HbGraphsQuery.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this HbGraphsQuery.

        label name  # noqa: E501

        :param device_name: The device_name of this HbGraphsQuery.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def measurement_name(self):
        """Gets the measurement_name of this HbGraphsQuery.  # noqa: E501

        Measurement name (topic/rule name)  # noqa: E501

        :return: The measurement_name of this HbGraphsQuery.  # noqa: E501
        :rtype: str
        """
        return self._measurement_name

    @measurement_name.setter
    def measurement_name(self, measurement_name):
        """Sets the measurement_name of this HbGraphsQuery.

        Measurement name (topic/rule name)  # noqa: E501

        :param measurement_name: The measurement_name of this HbGraphsQuery.  # noqa: E501
        :type: str
        """

        self._measurement_name = measurement_name

    @property
    def measurement_type(self):
        """Gets the measurement_type of this HbGraphsQuery.  # noqa: E501

        Measurement type: Field table/Trigger table/Rollup table  # noqa: E501

        :return: The measurement_type of this HbGraphsQuery.  # noqa: E501
        :rtype: str
        """
        return self._measurement_type

    @measurement_type.setter
    def measurement_type(self, measurement_type):
        """Sets the measurement_type of this HbGraphsQuery.

        Measurement type: Field table/Trigger table/Rollup table  # noqa: E501

        :param measurement_type: The measurement_type of this HbGraphsQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["Field table", "Trigger table", "Rollup table"]  # noqa: E501
        if measurement_type not in allowed_values:
            raise ValueError(
                "Invalid value for `measurement_type` ({0}), must be one of {1}"  # noqa: E501
                .format(measurement_type, allowed_values)
            )

        self._measurement_type = measurement_type

    @property
    def transformation(self):
        """Gets the transformation of this HbGraphsQuery.  # noqa: E501

        Transformation value for query  # noqa: E501

        :return: The transformation of this HbGraphsQuery.  # noqa: E501
        :rtype: str
        """
        return self._transformation

    @transformation.setter
    def transformation(self, transformation):
        """Sets the transformation of this HbGraphsQuery.

        Transformation value for query  # noqa: E501

        :param transformation: The transformation of this HbGraphsQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["derivative", "spread", "non-negative-derivative", "difference", "cumulative-sum", "elapsed"]  # noqa: E501
        if transformation not in allowed_values:
            raise ValueError(
                "Invalid value for `transformation` ({0}), must be one of {1}"  # noqa: E501
                .format(transformation, allowed_values)
            )

        self._transformation = transformation

    @property
    def field_name(self):
        """Gets the field_name of this HbGraphsQuery.  # noqa: E501

        Field name of a measurement   # noqa: E501

        :return: The field_name of this HbGraphsQuery.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this HbGraphsQuery.

        Field name of a measurement   # noqa: E501

        :param field_name: The field_name of this HbGraphsQuery.  # noqa: E501
        :type: str
        """

        self._field_name = field_name

    @property
    def field_type(self):
        """Gets the field_type of this HbGraphsQuery.  # noqa: E501

        Field type of the measurement (int, float, string, uint)  # noqa: E501

        :return: The field_type of this HbGraphsQuery.  # noqa: E501
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this HbGraphsQuery.

        Field type of the measurement (int, float, string, uint)  # noqa: E501

        :param field_type: The field_type of this HbGraphsQuery.  # noqa: E501
        :type: str
        """

        self._field_type = field_type

    @property
    def field_aggregation(self):
        """Gets the field_aggregation of this HbGraphsQuery.  # noqa: E501

        Data aggregation type of the field/key  # noqa: E501

        :return: The field_aggregation of this HbGraphsQuery.  # noqa: E501
        :rtype: str
        """
        return self._field_aggregation

    @field_aggregation.setter
    def field_aggregation(self, field_aggregation):
        """Sets the field_aggregation of this HbGraphsQuery.

        Data aggregation type of the field/key  # noqa: E501

        :param field_aggregation: The field_aggregation of this HbGraphsQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["mean", "mode", "median", "count", "sum", "integral", "distinct"]  # noqa: E501
        if field_aggregation not in allowed_values:
            raise ValueError(
                "Invalid value for `field_aggregation` ({0}), must be one of {1}"  # noqa: E501
                .format(field_aggregation, allowed_values)
            )

        self._field_aggregation = field_aggregation

    @property
    def where(self):
        """Gets the where of this HbGraphsQuery.  # noqa: E501


        :return: The where of this HbGraphsQuery.  # noqa: E501
        :rtype: HbGraphsQueryWhere
        """
        return self._where

    @where.setter
    def where(self, where):
        """Sets the where of this HbGraphsQuery.


        :param where: The where of this HbGraphsQuery.  # noqa: E501
        :type: HbGraphsQueryWhere
        """

        self._where = where

    @property
    def group_by_interval(self):
        """Gets the group_by_interval of this HbGraphsQuery.  # noqa: E501

        Group by interval of the query  # noqa: E501

        :return: The group_by_interval of this HbGraphsQuery.  # noqa: E501
        :rtype: str
        """
        return self._group_by_interval

    @group_by_interval.setter
    def group_by_interval(self, group_by_interval):
        """Sets the group_by_interval of this HbGraphsQuery.

        Group by interval of the query  # noqa: E501

        :param group_by_interval: The group_by_interval of this HbGraphsQuery.  # noqa: E501
        :type: str
        """

        self._group_by_interval = group_by_interval

    @property
    def group_by_fill(self):
        """Gets the group_by_fill of this HbGraphsQuery.  # noqa: E501

        Group by fill value of the query  # noqa: E501

        :return: The group_by_fill of this HbGraphsQuery.  # noqa: E501
        :rtype: str
        """
        return self._group_by_fill

    @group_by_fill.setter
    def group_by_fill(self, group_by_fill):
        """Sets the group_by_fill of this HbGraphsQuery.

        Group by fill value of the query  # noqa: E501

        :param group_by_fill: The group_by_fill of this HbGraphsQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["fill(null)", "none"]  # noqa: E501
        if group_by_fill not in allowed_values:
            raise ValueError(
                "Invalid value for `group_by_fill` ({0}), must be one of {1}"  # noqa: E501
                .format(group_by_fill, allowed_values)
            )

        self._group_by_fill = group_by_fill

    @property
    def group_by_tag_key(self):
        """Gets the group_by_tag_key of this HbGraphsQuery.  # noqa: E501

        Group by tag key value of the query  # noqa: E501

        :return: The group_by_tag_key of this HbGraphsQuery.  # noqa: E501
        :rtype: str
        """
        return self._group_by_tag_key

    @group_by_tag_key.setter
    def group_by_tag_key(self, group_by_tag_key):
        """Sets the group_by_tag_key of this HbGraphsQuery.

        Group by tag key value of the query  # noqa: E501

        :param group_by_tag_key: The group_by_tag_key of this HbGraphsQuery.  # noqa: E501
        :type: str
        """

        self._group_by_tag_key = group_by_tag_key

    @property
    def retention_policy(self):
        """Gets the retention_policy of this HbGraphsQuery.  # noqa: E501

        Retention policy name  # noqa: E501

        :return: The retention_policy of this HbGraphsQuery.  # noqa: E501
        :rtype: str
        """
        return self._retention_policy

    @retention_policy.setter
    def retention_policy(self, retention_policy):
        """Sets the retention_policy of this HbGraphsQuery.

        Retention policy name  # noqa: E501

        :param retention_policy: The retention_policy of this HbGraphsQuery.  # noqa: E501
        :type: str
        """

        self._retention_policy = retention_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HbGraphsQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HbGraphsQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
