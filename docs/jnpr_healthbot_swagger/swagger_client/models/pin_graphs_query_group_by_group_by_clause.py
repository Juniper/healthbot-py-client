# coding: utf-8

"""
    Paragon Insights APIs

    API interface for PI application  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: healthbot-feedback@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PinGraphsQueryGroupByGroupByClause(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interval': 'str',
        'fill': 'str',
        'tag_keys': 'PinGraphsQueryGroupByGroupByClauseTagKeys'
    }

    attribute_map = {
        'interval': 'interval',
        'fill': 'fill',
        'tag_keys': 'tag_keys'
    }

    def __init__(self, interval=None, fill=None, tag_keys=None):  # noqa: E501
        """PinGraphsQueryGroupByGroupByClause - a model defined in Swagger"""  # noqa: E501

        self._interval = None
        self._fill = None
        self._tag_keys = None
        self.discriminator = None

        if interval is not None:
            self.interval = interval
        if fill is not None:
            self.fill = fill
        if tag_keys is not None:
            self.tag_keys = tag_keys

    @property
    def interval(self):
        """Gets the interval of this PinGraphsQueryGroupByGroupByClause.  # noqa: E501

        Operator for where clause  # noqa: E501

        :return: The interval of this PinGraphsQueryGroupByGroupByClause.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this PinGraphsQueryGroupByGroupByClause.

        Operator for where clause  # noqa: E501

        :param interval: The interval of this PinGraphsQueryGroupByGroupByClause.  # noqa: E501
        :type: str
        """
        allowed_values = ["1s", "10s", "1m", "5m", "15m", "1h"]  # noqa: E501
        if interval not in allowed_values:
            raise ValueError(
                "Invalid value for `interval` ({0}), must be one of {1}"  # noqa: E501
                .format(interval, allowed_values)
            )

        self._interval = interval

    @property
    def fill(self):
        """Gets the fill of this PinGraphsQueryGroupByGroupByClause.  # noqa: E501

        Operator for where clause  # noqa: E501

        :return: The fill of this PinGraphsQueryGroupByGroupByClause.  # noqa: E501
        :rtype: str
        """
        return self._fill

    @fill.setter
    def fill(self, fill):
        """Sets the fill of this PinGraphsQueryGroupByGroupByClause.

        Operator for where clause  # noqa: E501

        :param fill: The fill of this PinGraphsQueryGroupByGroupByClause.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "0", "previous", "linear"]  # noqa: E501
        if fill not in allowed_values:
            raise ValueError(
                "Invalid value for `fill` ({0}), must be one of {1}"  # noqa: E501
                .format(fill, allowed_values)
            )

        self._fill = fill

    @property
    def tag_keys(self):
        """Gets the tag_keys of this PinGraphsQueryGroupByGroupByClause.  # noqa: E501


        :return: The tag_keys of this PinGraphsQueryGroupByGroupByClause.  # noqa: E501
        :rtype: PinGraphsQueryGroupByGroupByClauseTagKeys
        """
        return self._tag_keys

    @tag_keys.setter
    def tag_keys(self, tag_keys):
        """Sets the tag_keys of this PinGraphsQueryGroupByGroupByClause.


        :param tag_keys: The tag_keys of this PinGraphsQueryGroupByGroupByClause.  # noqa: E501
        :type: PinGraphsQueryGroupByGroupByClauseTagKeys
        """

        self._tag_keys = tag_keys

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PinGraphsQueryGroupByGroupByClause, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PinGraphsQueryGroupByGroupByClause):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
