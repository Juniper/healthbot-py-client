# coding: utf-8

"""
    Paragon Insights APIs

    API interface for PI application  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: healthbot-feedback@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PanelDataSchemaAddWhereCondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key_or_field': 'PanelDataSchemaAddWhereConditionKeyOrField',
        'key_or_field_value': 'PanelDataSchemaAddWhereConditionKeyOrFieldValue',
        'operator': 'PanelDataSchemaAddWhereConditionOperator'
    }

    attribute_map = {
        'key_or_field': 'keyOrField',
        'key_or_field_value': 'keyOrFieldValue',
        'operator': 'operator'
    }

    def __init__(self, key_or_field=None, key_or_field_value=None, operator=None):  # noqa: E501
        """PanelDataSchemaAddWhereCondition - a model defined in Swagger"""  # noqa: E501

        self._key_or_field = None
        self._key_or_field_value = None
        self._operator = None
        self.discriminator = None

        if key_or_field is not None:
            self.key_or_field = key_or_field
        if key_or_field_value is not None:
            self.key_or_field_value = key_or_field_value
        if operator is not None:
            self.operator = operator

    @property
    def key_or_field(self):
        """Gets the key_or_field of this PanelDataSchemaAddWhereCondition.  # noqa: E501


        :return: The key_or_field of this PanelDataSchemaAddWhereCondition.  # noqa: E501
        :rtype: PanelDataSchemaAddWhereConditionKeyOrField
        """
        return self._key_or_field

    @key_or_field.setter
    def key_or_field(self, key_or_field):
        """Sets the key_or_field of this PanelDataSchemaAddWhereCondition.


        :param key_or_field: The key_or_field of this PanelDataSchemaAddWhereCondition.  # noqa: E501
        :type: PanelDataSchemaAddWhereConditionKeyOrField
        """

        self._key_or_field = key_or_field

    @property
    def key_or_field_value(self):
        """Gets the key_or_field_value of this PanelDataSchemaAddWhereCondition.  # noqa: E501


        :return: The key_or_field_value of this PanelDataSchemaAddWhereCondition.  # noqa: E501
        :rtype: PanelDataSchemaAddWhereConditionKeyOrFieldValue
        """
        return self._key_or_field_value

    @key_or_field_value.setter
    def key_or_field_value(self, key_or_field_value):
        """Sets the key_or_field_value of this PanelDataSchemaAddWhereCondition.


        :param key_or_field_value: The key_or_field_value of this PanelDataSchemaAddWhereCondition.  # noqa: E501
        :type: PanelDataSchemaAddWhereConditionKeyOrFieldValue
        """

        self._key_or_field_value = key_or_field_value

    @property
    def operator(self):
        """Gets the operator of this PanelDataSchemaAddWhereCondition.  # noqa: E501


        :return: The operator of this PanelDataSchemaAddWhereCondition.  # noqa: E501
        :rtype: PanelDataSchemaAddWhereConditionOperator
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this PanelDataSchemaAddWhereCondition.


        :param operator: The operator of this PanelDataSchemaAddWhereCondition.  # noqa: E501
        :type: PanelDataSchemaAddWhereConditionOperator
        """

        self._operator = operator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PanelDataSchemaAddWhereCondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PanelDataSchemaAddWhereCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
