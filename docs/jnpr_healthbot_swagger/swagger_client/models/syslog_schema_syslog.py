# coding: utf-8

"""
    Paragon Insights APIs

    API interface for PI application  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: healthbot-feedback@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SyslogSchemaSyslog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'port': 'int',
        'header_pattern': 'list[HeaderPatternSchema]',
        'pattern': 'list[PatternSchema]',
        'pattern_set': 'list[PatternSetSchema]'
    }

    attribute_map = {
        'port': 'port',
        'header_pattern': 'header-pattern',
        'pattern': 'pattern',
        'pattern_set': 'pattern-set'
    }

    def __init__(self, port=None, header_pattern=None, pattern=None, pattern_set=None):  # noqa: E501
        """SyslogSchemaSyslog - a model defined in Swagger"""  # noqa: E501

        self._port = None
        self._header_pattern = None
        self._pattern = None
        self._pattern_set = None
        self.discriminator = None

        if port is not None:
            self.port = port
        if header_pattern is not None:
            self.header_pattern = header_pattern
        if pattern is not None:
            self.pattern = pattern
        if pattern_set is not None:
            self.pattern_set = pattern_set

    @property
    def port(self):
        """Gets the port of this SyslogSchemaSyslog.  # noqa: E501

        Port to listen for syslog messages, default is 514  # noqa: E501

        :return: The port of this SyslogSchemaSyslog.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this SyslogSchemaSyslog.

        Port to listen for syslog messages, default is 514  # noqa: E501

        :param port: The port of this SyslogSchemaSyslog.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def header_pattern(self):
        """Gets the header_pattern of this SyslogSchemaSyslog.  # noqa: E501


        :return: The header_pattern of this SyslogSchemaSyslog.  # noqa: E501
        :rtype: list[HeaderPatternSchema]
        """
        return self._header_pattern

    @header_pattern.setter
    def header_pattern(self, header_pattern):
        """Sets the header_pattern of this SyslogSchemaSyslog.


        :param header_pattern: The header_pattern of this SyslogSchemaSyslog.  # noqa: E501
        :type: list[HeaderPatternSchema]
        """

        self._header_pattern = header_pattern

    @property
    def pattern(self):
        """Gets the pattern of this SyslogSchemaSyslog.  # noqa: E501


        :return: The pattern of this SyslogSchemaSyslog.  # noqa: E501
        :rtype: list[PatternSchema]
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this SyslogSchemaSyslog.


        :param pattern: The pattern of this SyslogSchemaSyslog.  # noqa: E501
        :type: list[PatternSchema]
        """

        self._pattern = pattern

    @property
    def pattern_set(self):
        """Gets the pattern_set of this SyslogSchemaSyslog.  # noqa: E501


        :return: The pattern_set of this SyslogSchemaSyslog.  # noqa: E501
        :rtype: list[PatternSetSchema]
        """
        return self._pattern_set

    @pattern_set.setter
    def pattern_set(self, pattern_set):
        """Sets the pattern_set of this SyslogSchemaSyslog.


        :param pattern_set: The pattern_set of this SyslogSchemaSyslog.  # noqa: E501
        :type: list[PatternSetSchema]
        """

        self._pattern_set = pattern_set

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyslogSchemaSyslog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyslogSchemaSyslog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
