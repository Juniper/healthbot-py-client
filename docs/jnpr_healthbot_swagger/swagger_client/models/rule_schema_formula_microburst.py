# coding: utf-8

"""
    Paragon Insights APIs

    API interface for PI application  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: healthbot-feedback@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RuleSchemaFormulaMicroburst(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'if_name': 'str',
        'packets': 'str',
        'percentage': 'str',
        'queue_no': 'str'
    }

    attribute_map = {
        'if_name': 'if-name',
        'packets': 'packets',
        'percentage': 'percentage',
        'queue_no': 'queue-no'
    }

    def __init__(self, if_name=None, packets=None, percentage=None, queue_no=None):  # noqa: E501
        """RuleSchemaFormulaMicroburst - a model defined in Swagger"""  # noqa: E501

        self._if_name = None
        self._packets = None
        self._percentage = None
        self._queue_no = None
        self.discriminator = None

        self.if_name = if_name
        self.packets = packets
        self.percentage = percentage
        self.queue_no = queue_no

    @property
    def if_name(self):
        """Gets the if_name of this RuleSchemaFormulaMicroburst.  # noqa: E501

        Interface name. This should be field name where interface names are being stored  # noqa: E501

        :return: The if_name of this RuleSchemaFormulaMicroburst.  # noqa: E501
        :rtype: str
        """
        return self._if_name

    @if_name.setter
    def if_name(self, if_name):
        """Sets the if_name of this RuleSchemaFormulaMicroburst.

        Interface name. This should be field name where interface names are being stored  # noqa: E501

        :param if_name: The if_name of this RuleSchemaFormulaMicroburst.  # noqa: E501
        :type: str
        """
        if if_name is None:
            raise ValueError("Invalid value for `if_name`, must not be `None`")  # noqa: E501

        self._if_name = if_name

    @property
    def packets(self):
        """Gets the packets of this RuleSchemaFormulaMicroburst.  # noqa: E501

        Queue egress packets. This should be field name where queue egress packets are being stored  # noqa: E501

        :return: The packets of this RuleSchemaFormulaMicroburst.  # noqa: E501
        :rtype: str
        """
        return self._packets

    @packets.setter
    def packets(self, packets):
        """Sets the packets of this RuleSchemaFormulaMicroburst.

        Queue egress packets. This should be field name where queue egress packets are being stored  # noqa: E501

        :param packets: The packets of this RuleSchemaFormulaMicroburst.  # noqa: E501
        :type: str
        """
        if packets is None:
            raise ValueError("Invalid value for `packets`, must not be `None`")  # noqa: E501

        self._packets = packets

    @property
    def percentage(self):
        """Gets the percentage of this RuleSchemaFormulaMicroburst.  # noqa: E501

        Queue buffer occupancy percentage. This should be field name where queue buffer occupancy percentage are being stored  # noqa: E501

        :return: The percentage of this RuleSchemaFormulaMicroburst.  # noqa: E501
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this RuleSchemaFormulaMicroburst.

        Queue buffer occupancy percentage. This should be field name where queue buffer occupancy percentage are being stored  # noqa: E501

        :param percentage: The percentage of this RuleSchemaFormulaMicroburst.  # noqa: E501
        :type: str
        """
        if percentage is None:
            raise ValueError("Invalid value for `percentage`, must not be `None`")  # noqa: E501

        self._percentage = percentage

    @property
    def queue_no(self):
        """Gets the queue_no of this RuleSchemaFormulaMicroburst.  # noqa: E501

        Queue numbers. This should be field name where queue numbers are being stored  # noqa: E501

        :return: The queue_no of this RuleSchemaFormulaMicroburst.  # noqa: E501
        :rtype: str
        """
        return self._queue_no

    @queue_no.setter
    def queue_no(self, queue_no):
        """Sets the queue_no of this RuleSchemaFormulaMicroburst.

        Queue numbers. This should be field name where queue numbers are being stored  # noqa: E501

        :param queue_no: The queue_no of this RuleSchemaFormulaMicroburst.  # noqa: E501
        :type: str
        """
        if queue_no is None:
            raise ValueError("Invalid value for `queue_no`, must not be `None`")  # noqa: E501

        self._queue_no = queue_no

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleSchemaFormulaMicroburst, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleSchemaFormulaMicroburst):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
