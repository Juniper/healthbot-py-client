# coding: utf-8

"""
    Paragon Insights APIs

    API interface for PI application  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: healthbot-feedback@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FrequencyProfileSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'non_sensor': 'list[FrequencyprofileSchemaNonsensor]',
        'sensor': 'list[FrequencyprofileSchemaSensor]'
    }

    attribute_map = {
        'name': 'name',
        'non_sensor': 'non-sensor',
        'sensor': 'sensor'
    }

    def __init__(self, name=None, non_sensor=None, sensor=None):  # noqa: E501
        """FrequencyProfileSchema - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._non_sensor = None
        self._sensor = None
        self.discriminator = None

        self.name = name
        if non_sensor is not None:
            self.non_sensor = non_sensor
        if sensor is not None:
            self.sensor = sensor

    @property
    def name(self):
        """Gets the name of this FrequencyProfileSchema.  # noqa: E501

        Frequency profile name  # noqa: E501

        :return: The name of this FrequencyProfileSchema.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FrequencyProfileSchema.

        Frequency profile name  # noqa: E501

        :param name: The name of this FrequencyProfileSchema.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if name is not None and not re.search(r'^[a-zA-Z][a-zA-Z0-9_-]*$', name):  # noqa: E501
            raise ValueError(r"Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z][a-zA-Z0-9_-]*$/`")  # noqa: E501

        self._name = name

    @property
    def non_sensor(self):
        """Gets the non_sensor of this FrequencyProfileSchema.  # noqa: E501


        :return: The non_sensor of this FrequencyProfileSchema.  # noqa: E501
        :rtype: list[FrequencyprofileSchemaNonsensor]
        """
        return self._non_sensor

    @non_sensor.setter
    def non_sensor(self, non_sensor):
        """Sets the non_sensor of this FrequencyProfileSchema.


        :param non_sensor: The non_sensor of this FrequencyProfileSchema.  # noqa: E501
        :type: list[FrequencyprofileSchemaNonsensor]
        """

        self._non_sensor = non_sensor

    @property
    def sensor(self):
        """Gets the sensor of this FrequencyProfileSchema.  # noqa: E501


        :return: The sensor of this FrequencyProfileSchema.  # noqa: E501
        :rtype: list[FrequencyprofileSchemaSensor]
        """
        return self._sensor

    @sensor.setter
    def sensor(self, sensor):
        """Sets the sensor of this FrequencyProfileSchema.


        :param sensor: The sensor of this FrequencyProfileSchema.  # noqa: E501
        :type: list[FrequencyprofileSchemaSensor]
        """

        self._sensor = sensor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FrequencyProfileSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FrequencyProfileSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
