# coding: utf-8

"""
    Paragon Insights APIs

    API interface for PI application  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: healthbot-feedback@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SflowSchemaSflowSample(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enterprise': 'int',
        'field': 'list[SflowSchemaSflowField]',
        'format': 'int',
        'record_type': 'str',
        'sample_name': 'str'
    }

    attribute_map = {
        'enterprise': 'enterprise',
        'field': 'field',
        'format': 'format',
        'record_type': 'record-type',
        'sample_name': 'sample-name'
    }

    def __init__(self, enterprise=None, field=None, format=None, record_type=None, sample_name=None):  # noqa: E501
        """SflowSchemaSflowSample - a model defined in Swagger"""  # noqa: E501

        self._enterprise = None
        self._field = None
        self._format = None
        self._record_type = None
        self._sample_name = None
        self.discriminator = None

        self.enterprise = enterprise
        self.field = field
        self.format = format
        if record_type is not None:
            self.record_type = record_type
        self.sample_name = sample_name

    @property
    def enterprise(self):
        """Gets the enterprise of this SflowSchemaSflowSample.  # noqa: E501

        Enterprise to which sample belongs  # noqa: E501

        :return: The enterprise of this SflowSchemaSflowSample.  # noqa: E501
        :rtype: int
        """
        return self._enterprise

    @enterprise.setter
    def enterprise(self, enterprise):
        """Sets the enterprise of this SflowSchemaSflowSample.

        Enterprise to which sample belongs  # noqa: E501

        :param enterprise: The enterprise of this SflowSchemaSflowSample.  # noqa: E501
        :type: int
        """
        if enterprise is None:
            raise ValueError("Invalid value for `enterprise`, must not be `None`")  # noqa: E501

        self._enterprise = enterprise

    @property
    def field(self):
        """Gets the field of this SflowSchemaSflowSample.  # noqa: E501

        List of fields  # noqa: E501

        :return: The field of this SflowSchemaSflowSample.  # noqa: E501
        :rtype: list[SflowSchemaSflowField]
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this SflowSchemaSflowSample.

        List of fields  # noqa: E501

        :param field: The field of this SflowSchemaSflowSample.  # noqa: E501
        :type: list[SflowSchemaSflowField]
        """
        if field is None:
            raise ValueError("Invalid value for `field`, must not be `None`")  # noqa: E501

        self._field = field

    @property
    def format(self):
        """Gets the format of this SflowSchemaSflowSample.  # noqa: E501

        Format of sample  # noqa: E501

        :return: The format of this SflowSchemaSflowSample.  # noqa: E501
        :rtype: int
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this SflowSchemaSflowSample.

        Format of sample  # noqa: E501

        :param format: The format of this SflowSchemaSflowSample.  # noqa: E501
        :type: int
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501

        self._format = format

    @property
    def record_type(self):
        """Gets the record_type of this SflowSchemaSflowSample.  # noqa: E501

        Type of records in this sample type  # noqa: E501

        :return: The record_type of this SflowSchemaSflowSample.  # noqa: E501
        :rtype: str
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this SflowSchemaSflowSample.

        Type of records in this sample type  # noqa: E501

        :param record_type: The record_type of this SflowSchemaSflowSample.  # noqa: E501
        :type: str
        """
        allowed_values = ["flow", "counter"]  # noqa: E501
        if record_type not in allowed_values:
            raise ValueError(
                "Invalid value for `record_type` ({0}), must be one of {1}"  # noqa: E501
                .format(record_type, allowed_values)
            )

        self._record_type = record_type

    @property
    def sample_name(self):
        """Gets the sample_name of this SflowSchemaSflowSample.  # noqa: E501

        Name of sample type  # noqa: E501

        :return: The sample_name of this SflowSchemaSflowSample.  # noqa: E501
        :rtype: str
        """
        return self._sample_name

    @sample_name.setter
    def sample_name(self, sample_name):
        """Sets the sample_name of this SflowSchemaSflowSample.

        Name of sample type  # noqa: E501

        :param sample_name: The sample_name of this SflowSchemaSflowSample.  # noqa: E501
        :type: str
        """
        if sample_name is None:
            raise ValueError("Invalid value for `sample_name`, must not be `None`")  # noqa: E501

        self._sample_name = sample_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SflowSchemaSflowSample, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SflowSchemaSflowSample):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
