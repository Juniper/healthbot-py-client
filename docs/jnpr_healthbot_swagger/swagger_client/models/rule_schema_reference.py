# coding: utf-8

"""
    Paragon Insights APIs

    API interface for PI application  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: healthbot-feedback@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RuleSchemaReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_if_missing': 'RuleSchemaReferenceDataifmissing',
        'path': 'str',
        'time_range': 'str'
    }

    attribute_map = {
        'data_if_missing': 'data-if-missing',
        'path': 'path',
        'time_range': 'time-range'
    }

    def __init__(self, data_if_missing=None, path=None, time_range=None):  # noqa: E501
        """RuleSchemaReference - a model defined in Swagger"""  # noqa: E501

        self._data_if_missing = None
        self._path = None
        self._time_range = None
        self.discriminator = None

        if data_if_missing is not None:
            self.data_if_missing = data_if_missing
        self.path = path
        if time_range is not None:
            self.time_range = time_range

    @property
    def data_if_missing(self):
        """Gets the data_if_missing of this RuleSchemaReference.  # noqa: E501


        :return: The data_if_missing of this RuleSchemaReference.  # noqa: E501
        :rtype: RuleSchemaReferenceDataifmissing
        """
        return self._data_if_missing

    @data_if_missing.setter
    def data_if_missing(self, data_if_missing):
        """Sets the data_if_missing of this RuleSchemaReference.


        :param data_if_missing: The data_if_missing of this RuleSchemaReference.  # noqa: E501
        :type: RuleSchemaReferenceDataifmissing
        """

        self._data_if_missing = data_if_missing

    @property
    def path(self):
        """Gets the path of this RuleSchemaReference.  # noqa: E501

        Reference to a field or trigger in different rule. Format is /topic[topic-name=<topic-name>]/rule[rule-name=<rule-name>]/field[<condition>]/<field-name> for field reference and /topic[topic-name=<topic-name>]/rule[rule-name=<rule-name>]/trigger[trigger-name=<trigger-name>]/key[condition]/trigger_field for trigger reference. Filtering part where field and key are mentioned is optional  # noqa: E501

        :return: The path of this RuleSchemaReference.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this RuleSchemaReference.

        Reference to a field or trigger in different rule. Format is /topic[topic-name=<topic-name>]/rule[rule-name=<rule-name>]/field[<condition>]/<field-name> for field reference and /topic[topic-name=<topic-name>]/rule[rule-name=<rule-name>]/trigger[trigger-name=<trigger-name>]/key[condition]/trigger_field for trigger reference. Filtering part where field and key are mentioned is optional  # noqa: E501

        :param path: The path of this RuleSchemaReference.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def time_range(self):
        """Gets the time_range of this RuleSchemaReference.  # noqa: E501

        How much back in time should we look for data. Specify positive integer followed by s/m/h/d/w/y/o representing seconds/minutes/hours/days/weeks/years/offset. Eg: 2s  # noqa: E501

        :return: The time_range of this RuleSchemaReference.  # noqa: E501
        :rtype: str
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this RuleSchemaReference.

        How much back in time should we look for data. Specify positive integer followed by s/m/h/d/w/y/o representing seconds/minutes/hours/days/weeks/years/offset. Eg: 2s  # noqa: E501

        :param time_range: The time_range of this RuleSchemaReference.  # noqa: E501
        :type: str
        """
        if time_range is not None and not re.search(r'^[1-9][0-9]*(\\.[0-9]+)?(o|s|m|h|d|w|y|offset)$', time_range):  # noqa: E501
            raise ValueError(r"Invalid value for `time_range`, must be a follow pattern or equal to `/^[1-9][0-9]*(\\.[0-9]+)?(o|s|m|h|d|w|y|offset)$/`")  # noqa: E501

        self._time_range = time_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleSchemaReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleSchemaReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
